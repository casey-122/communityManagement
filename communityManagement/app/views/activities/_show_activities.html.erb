
<!-- 遍历as_type为0的评论对象集合@club_comments -->
<% @act_comments.each do |comment| %>
  <div class="re-reply clearfix">
    <div class="avatar">
      <!-- get_real_name方法在club_comment.rb文件中已经定义，用来获取评论者的用户名 -->
      <a><%= comment.get_yong_hu_name %></a>
    </div>
    <div class="body">
      <!-- 评论status为0时代表正常显示，不为0是代表已经被删除，被删除的评论需要显示为「该评论已删除」 -->
      <span id="content_<%= comment.id %>">
      <% if comment.status == 0 %>
        <div><%= comment.content %></div>
      <% else %>
        <div class="delete-content">该评论已删除</div>
      <% end %>
      </span>

      <div class="time_right" id="time_<%= comment.id %>">
        <!-- 获取评论的创建时间 -->
        <%= comment.get_created_at %>
        <!-- 已被删除的评论后面不显示回复按钮 -->
        <% if comment.status == 0 %>
          <a id="reply<%= comment.id %>" onclick="outIn(<%=comment.id%>,<%=comment.id%>)">回复</a>
          <% if comment.get_yong_hu_right(current_user) %>
            <a data-remote="true" href="/activities/delete_comment/<%= comment.id %>" onclick="putDel(<%=comment.id%>)">删除</a>
          <% end %>
        <% end %>
      </div>

      <div id="reply_page_<%= comment.id %>">
        <!-- 可以通过re_comment_id字段找到，对应本次遍历的评论对象的所有回复 -->
        <% @reply = ActComment.where(re_comment_id:comment.id, as_type:1) %>
        <!-- 我们只默认展示两条回复，需要查看更多回复，需要点击查看更多回复
        @reply.limit(2)的意思是只选择查询结果的前两条数据 -->
        <% @reply.limit(2).each do |re| %>
          <div class="re-reply">
            <a><%= re.get_yong_hu_name %></a>
            <!--        如果回复的是评论的回复，该回复用户名后面需要跟被回复用户的用户名，re_reply_id字段保存被回复用户的id；-->
            <!--        如果直接回复评论，那么回复用户名后面直接跟回复内容，re_reply_id字段为空。-->
            <% if re.re_reply_id.blank? %>
              ：
            <% else %>
              回复 <a><%= ActComment.find(re.re_reply_id).get_yong_hu_name %></a> :
            <% end %>
            <span id="content_<%= re.id %>">
              <% if re.status == 0 %>
                <span><%= re.content %></span>
              <% else %>
                <span class="delete-content">该评论已删除</span>
              <% end %>
            </span>
            <div class="time_right">
              <%= re.get_created_at %>
              <span id="time_<%= re.id %>">
              <% if re.status == 0 %>
              <!-- outIn方法控制回复框，当客户点击回复按钮，出现回复框，回复变成取消回复，点击取消回复，回复框收起 -->
              <a id="reply<%= re.id %>" onclick="outIn(<%= comment.id %>,<%=re.id%>)"> 回复</a>
                  <% if re.get_yong_hu_right(current_user) %>
                <a data-remote="true" href="/activities/delete_comment/<%= re.id %>" onclick="putDel(<%= re.id %>)">删除</a>
              <% end %>
            <% end %>
            </span>
            </div>
          </div>
        <% end %>
      </div>

      <!-- 当该评论的回复大于两条时，下面会有「查看更多回复」的链接，点击会查看到更多回复,主要通过js的控制点击查看更多回复 -->
      <% if @reply.count > 2 %>
        <!-- this代表本次点击的a标签对象-->
        <a id="spread-out" name="1" data-remote="true" href="/activities/show_replys/<%= comment.id %>/0" onclick="addPoint(this)">更多<%= @reply.count - 2 %>条回复 ↓</a>
      <% end %>

    </div>

    <!-- 回复框的内容 -->
    <%= form_for ActComment.new, url: "/activities/create_comment" do |f| %>
      <!-- 给每个评论的回复框的id都加上comment.id，这样每个评论都有唯一的id，这样才能通过js控制回复框出现在相应的评论下 -->
      <div class="comment-form reply-from" id="co-reply<%= comment.id %>" style="display:none;">
        <input type="text" name="comment" placeholder="写下你的回复..." class="comment-text">
        <div class="comment-submit">
          <input type="submit" value="回复" class="submit-issue-button btn btn-primary">
        </div>
        <input type="hidden" name="comment_id" value="<%= comment.id %>">
        <input type="hidden" name="act_id" value="<%= comment.act_id %>">
        <input type="hidden" name="as_type" value="1">
      </div>
    <% end %>

  </div>
  <hr>
<%end%>

<!--@act_comments为需要分页的对象集合-->
<!--:remote => true，是实现ajax，点击分页时，会调用对应方法的js.erb模板，实现局部刷新。-->
<!--在分页上显示分页的样式-->
<div class="dataTables_paginate">
  <%= paginate @act_comments,:remote => true %>
</div>

<script type="text/javascript">
    // 如果a标签中href元素与onclick元素同时存在，会先执行onclick，后执行href
    // 当我们点击 删除 a标签时，会先执行js方法putDel()，将页面上需要删除的评论的内容改为“该评论已删除”，
    // 其实现在还没有实际删除掉该评论，然后再执行href链接，找到对应的controller里面的delete_comment方法，在后台实际删掉该评论。

    // 删除评论
    function putDel(comment_id) {
        var content = document.getElementById("content_" + comment_id);
        var timeRight = document.getElementById("time_" + comment_id);
        content.innerHTML = "<span class='delete-content'>该评论已删除</span>";
        timeRight.style.display = "none";
    }

    // 更多恢复展开
    // 得到本次点击的a标签对象的href链接，在用split将链接分割为数字，
    // 其中索引为6的值为:point参数，将此参数加1，替代a标签的href元素中原先的:point参数。
    function addPoint(oldA){
        href = oldA.href;
        arr_point = href.split("/")[6];
        oldA.href = href.substring(0, href.length - 1) + (parseInt(arr_point)+ 1);
    }
</script>
